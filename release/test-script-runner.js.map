{"version":3,"names":[],"mappings":"","sources":["test-script-runner.js"],"sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n'use strict';\n\nvar TestRunner = require('./models/test-runner');\nvar TestCase   = require('./models/test-case');\nvar TestStep   = require('./models/test-step');\n\nif (typeof window.TestScriptRunner == 'undefined') {\n\twindow.TestScriptRunner = {\n\t\tTestRunner: TestRunner,\n\t\tTestCase: TestCase,\n\t\tTestStep: TestStep\n\t};\n} else {\n\twindow.console.log('\"TestScriptRunner\" global variable already taken!');\n}\n},{\"./models/test-case\":6,\"./models/test-runner\":8,\"./models/test-step\":9}],2:[function(require,module,exports){\n'use strict';\n\nclass BaseException {\n\n\tconstructor(message, errorObj) {\n\t\tthis.name = this.constructor.name;\n\t\tthis.message = message + (typeof errorObj == 'undefined' ? '' : '\\nDetails: ' + JSON.stringify(errorObj, null, 4)) + '\\nStacktrace:';\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n\n}\n\nmodule.exports = BaseException;\n},{}],3:[function(require,module,exports){\n'use strict';\n\nconst BaseException = require('./base');\n\nclass FunctionNotFound extends BaseException {}\n\nmodule.exports = FunctionNotFound;\n},{\"./base\":2}],4:[function(require,module,exports){\n'use strict';\n\nconst BaseException = require('./base');\n\nclass OutOfBound extends BaseException {}\n\nmodule.exports = OutOfBound;\n},{\"./base\":2}],5:[function(require,module,exports){\n'use strict';\n\nconst BaseException = require('./base');\n\nclass StepNotFound extends BaseException {}\n\nmodule.exports = StepNotFound;\n},{\"./base\":2}],6:[function(require,module,exports){\n'use strict';\n\nconst OutOfBoundException   = require('../exceptions/out-of-bound');\nconst StepNotFoundException = require('../exceptions/step-not-found');\n\nclass TestCase {\n\n\tconstructor({ name, description }) {\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.testSteps = [];\n\t\tthis.currentStepNumber = 0;\n\t}\n\n\tget stepCounter() {\n\t\treturn this.testSteps.length;\n\t}\n\n\tget currentStep() {\n\t\tvar self = this;\n\n\t\treturn self.testSteps.find((step) => {\n\t\t\treturn step.stepNumber === self.currentStepNumber;\n\t\t});\n\t}\n\n\tsetTestRunner(testRunner) {\n\t\tthis.testRunner = testRunner;\n\t\tthis.caseNumber = testRunner.caseCounter - 1;\n\t}\n\n\taddTestStep(testStep) {\n\t\tthis.testSteps.push(testStep);\n\n\t\ttestStep.setTestCase(this);\n\t}\n\n\thasPrevStep() {\n\t\treturn this.currentStepNumber > 0;\n\t}\n\n\thasNextStep() {\n\t\treturn this.currentStepNumber < this.stepCounter;\n\t}\n\n\trunPrevStep(async = false) {\n\t\tif (this.currentStepNumber <= 0) {\n\t\t\tthrow new OutOfBoundException('Cannot run the previous step, because the current one is the first one!', {\n\t\t\t\tcaseNumber: this.caseNumber,\n\t\t\t\tcurrentStepNumber: this.currentStepNumber\n\t\t\t});\n\t\t}\n\n\t\tthis.currentStepNumber--;\n\n\t\treturn this.runCurrentStep(async);\n\t}\n\n\trunNextStep(async = false) {\n\t\tif (this.currentStepNumber + 1 >= this.stepCounter) {\n\t\t\tthrow new OutOfBoundException('Cannot run the next step, because the current one is the last one!', {\n\t\t\t\tcaseNumber: this.caseNumber,\n\t\t\t\tcurrentStepNumber: this.currentStepNumber\n\t\t\t});\n\t\t}\n\n\t\tthis.currentStepNumber++;\n\n\t\treturn this.runCurrentStep(async);\n\t}\n\n\trunStep(stepId, async = false) {\n\t\tif (stepId > this.stepCounter || stepId < 0) {\n\t\t\tthrow new OutOfBoundException('The given ID is not valid, its out of bound: ' + stepId, {\n\t\t\t\tcaseNumber: this.caseNumber,\n\t\t\t\tcurrentStepNumber: this.currentStepNumber\n\t\t\t});\n\t\t}\n\n\t\tthis.currentStepNumber = stepId;\n\n\t\treturn this.runCurrentStep(async);\n\t}\n\n\trunCurrentStep(async = false) {\n\t\tif (typeof this.currentStep == 'undefined') {\n\t\t\tthrow new StepNotFoundException('Step not found with the following ID: ' + this.currentStepNumber, {\n\t\t\t\tcaseNumber: this.caseNumber,\n\t\t\t\tcurrentStepNumber: this.currentStepNumber\n\t\t\t});\n\t\t}\n\n\t\treturn async ? this.currentStep.runAsync() : this.currentStep.run();\n\t}\n\n}\n\nmodule.exports = TestCase;\n},{\"../exceptions/out-of-bound\":4,\"../exceptions/step-not-found\":5}],7:[function(require,module,exports){\n'use strict';\n\nclass TestResult {\n\n\tconstructor({ success, error, returnValue, testStep, runNumber }) {\n\t\tthis.success = success;\n\t\tthis.error = error;\n\t\tthis.returnValue = returnValue;\n\t\tthis.testStep = testStep;\n\t\tthis.runNumber = runNumber;\n\t}\n\n}\n\nmodule.exports = TestResult;\n},{}],8:[function(require,module,exports){\n'use strict';\n\nclass TestRunner {\n\n\tconstructor() {\n\t\tthis.testCases = [];\n\t}\n\n\tget caseCounter() {\n\t\treturn this.testCases.length;\n\t}\n\n\taddTestCase(testCase) {\n\t\tthis.testCases.push(testCase);\n\n\t\ttestCase.setTestRunner(this);\n\t}\n}\n\nmodule.exports = TestRunner;\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst TestResult                = require('./test-result');\nconst FunctionNotFoundException = require('../exceptions/function-not-found');\n\nclass TestStep {\n\n\tconstructor({ name, description, fn }) {\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.fn = fn;\n\t\tthis.runNumber = 0;\n\t\tthis.lastResult = null;\n\t}\n\n\tsetTestCase(testCase) {\n\t\tthis.testCase = testCase;\n\t\tthis.stepNumber = testCase.stepCounter - 1;\n\t}\n\n\trun() {\n\t\tif (typeof this.fn == 'undefined' || this.fn === null) {\n\t\t\tthrow new FunctionNotFoundException('No test function provided to this step function!', {\n\t\t\t\tcaseNumber: this.testCase.caseNumber,\n\t\t\t\tstepNumber: this.stepNumber\n\t\t\t});\n\t\t}\n\n\t\tlet testResult;\n\n\t\tthis.runNumber++;\n\n\t\ttry {\n\t\t\tlet returnValue = this.fn();\n\n\t\t\ttestResult = new TestResult({\n\t\t\t\tsuccess: true,\n\t\t\t\terror: null,\n\t\t\t\treturnValue: returnValue,\n\t\t\t\ttestStep: this,\n\t\t\t\trunNumber: this.runNumber\n\t\t\t});\n\t\t} catch (error) {\n\t\t\ttestResult = new TestResult({\n\t\t\t\tsuccess: false,\n\t\t\t\terror: error,\n\t\t\t\treturnValue: null,\n\t\t\t\ttestStep: this,\n\t\t\t\trunNumber: this.runNumber\n\t\t\t});\n\t\t}\n\n\t\tthis.lastResult = testResult;\n\n\t\treturn testResult;\n\t}\n\n\trunAsync() {\n\t\tlet self = this;\n\n\t\tif (typeof self.fn == 'undefined' || self.fn === null) {\n\t\t\tthrow new FunctionNotFoundException('No test function provided to this step function!', {\n\t\t\t\tcaseNumber: self.testCase.caseNumber,\n\t\t\t\tstepNumber: self.stepNumber\n\t\t\t});\n\t\t}\n\n\t\tself.runNumber++;\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tresolve(self.fn());\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t}).then((returnValue) => {\n\t\t\tlet testResult = new TestResult({\n\t\t\t\tsuccess: true,\n\t\t\t\terror: null,\n\t\t\t\treturnValue: returnValue,\n\t\t\t\ttestStep: self,\n\t\t\t\trunNumber: self.runNumber\n\t\t\t});\n\n\t\t\tself.lastResult = testResult;\n\n\t\t\treturn testResult;\n\t\t}).catch((error) => {\n\t\t\tlet testResult = new TestResult({\n\t\t\t\tsuccess: false,\n\t\t\t\terror: error,\n\t\t\t\treturnValue: null,\n\t\t\t\ttestStep: self,\n\t\t\t\trunNumber: self.runNumber\n\t\t\t});\n\n\t\t\tself.lastResult = testResult;\n\n\t\t\tthrow testResult;\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.runNumber = 0;\n\t\tthis.lastResult = null;\n\t}\n\n}\n\nmodule.exports = TestStep;\n},{\"../exceptions/function-not-found\":3,\"./test-result\":7}]},{},[1]);\n"],"file":"test-script-runner.js"}